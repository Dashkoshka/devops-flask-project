pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = "flask-app:${BUILD_NUMBER}"     
        AWS_DEFAULT_REGION = "us-east-1"               
        ECR_REPO = "890742604545.dkr.ecr.us-east-1.amazonaws.com"
    }

    stages {
        stage('Build Docker Image') {
            steps {
                echo '-- Build Docker Image'
                sh 'pwd'  // print to console current directory location
                sh 'ls -la'  // print to console current directory file list
                dir('flask-app') {
                    echo 'enter flask-app folder'
                    sh 'ls -la' 
                    script {
                            docker.build("${DOCKER_IMAGE}", "-f Dockerfile .")
                    }
                }
            }
        }
     
        stage('Push to ECR') {                         
            steps {
                echo '-- Push to ECR'
                script {
                    sh """
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                        docker tag ${DOCKER_IMAGE} ${ECR_REPO}/${DOCKER_IMAGE}
                        docker push ${ECR_REPO}/${DOCKER_IMAGE}
                    """                                
                }
            }
        }

        stage('Deploy to EKS') {                     
            steps {
                echo '-- Deploy to EKS'
                sh 'pwd'  // print to console current directory location
                sh 'ls -la'  // print to console current directory file list
                dir('flask-app') {
                    echo 'enter flask-app folder'
                    sh 'ls -la' 
                    script {
                        sh """
                            aws eks update-kubeconfig --name my-eks-cluster --region ${AWS_DEFAULT_REGION}
                            kubectl apply -f k8s/configmap-and-secret/
                            sed 's|\${DOCKER_IMAGE}|${ECR_REPO}/${DOCKER_IMAGE}|g' k8s/deployment-and-services/deployment.yaml | kubectl apply -f -
                            kubectl apply -f k8s/deployment-and-services/service.yaml

                            # Wait for LoadBalancer to get external IP
                            echo 'Waiting for LoadBalancer to be ready...'
                            while [ -z \$(kubectl get service flask-app-service --template="{{range .status.loadBalancer.ingress}}{{.hostname}}{{end}}") ]
                            do
                                echo "Waiting for LoadBalancer external IP..."
                                sleep 10
                            done
                            
                            # Get and print the application URL
                            echo 'Application URL:'
                            kubectl get service flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' | awk '{print "http://"\$1":5053"}'
                        """                                
                    }
                }
            }
        }
    }
}                                                      